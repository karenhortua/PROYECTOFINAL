
from list import LinkedList

my_list = LinkedList()

my_list.add(2)
my_list.add("Hola")
my_list.add(5)

my_list.print_list()

print("Size:", my_list.length)

# IMPLEMENTACION DE LA LISTA

class Node:
  def __init__(self, cargo = None, next = None):
    self.cargo = cargo
    self.next = next

  def __str__(self):
    return str(self.cargo)


class LinkedList:
  def __init__(self):
    self.head = None
    self.last = None
    self.length = 0

  def add(self, value):
    new_node = Node(value)
    
    if self.head == None:
      self.head = new_node
    else:
      self.last.next = new_node
    
    self.last = new_node
    self.length += 1

  def print_list(self):
    node = self.head
    while node is not None:
      char = ", " if node.next is not None else ""
      print(node, end = char)
      node = node.next
    print()

## METODOS DE LA LISTA

class Node:
  def __init__(self, cargo = None, next = None):
    self.cargo = cargo
    self.next = next

  def __str__(self):
    return str(self.cargo)


class LinkedList:
  def __init__(self):
    self.head = None
    self.last = None
    self.length = 0

  def add(self, value):
    new_node = Node(value)
    
    if self.head == None:
      self.head = new_node
    else:
      self.last.next = new_node
    
    self.last = new_node
    self.length += 1

  def add_front(self, value):
    new_node = Node(value)

    if self.last == None:
      self.last = new_node
    else:
      new_node.next = self.head
    
    self.head = new_node
    self.length += 1

  def pop_front(self):
    if self.head is not None:
      temp = self.head
      self.head = temp.next
      del temp
      self.length -= 1

      if self.length == 0:
        self.last = None

  def index(self, i):
    node = self.head
    current_index = 0
    
    while current_index < i and node is not None:
      current_index += 1
      node = node.next

    if current_index == i:
      return node
    else:
      return None

  def first(self):
    return self.head

  def back(self):
    return self.last

  def size(self):
    return self.length

  def empty(self):
    return self.length == 0

  def print_list(self):
    node = self.head
    while node is not None:
      char = ", " if node.next is not None else ""
      print(node, end = char)
      node = node.next
    print()
    
    
## EJEMPLO DE LA VIDA REAL

from list import LinkedList

my_list = LinkedList()

my_list.add(2)
my_list.add("Hola")
my_list.add(5)
my_list.add_front("Juan")

my_list.print_list()
print("index 2:", my_list.index(2))
print("First:", my_list.first())
print("Last:", my_list.back())
print("Size:", my_list.size())

my_list.pop_front()

my_list.print_list()
print("index 2:", my_list.index(2))
print("First:", my_list.first())
print("Last:", my_list.back())
print("Size:", my_list.size())


class Persona:
  def __init__(self, name, surname, age, cedula):
    self.name = name
    self.surname = surname
    self.age = age
    self.cedula = cedula

  def __str__(self):
    msg = self.name + " " + self.surname + "(" + self.cedula + ")"
    return msg

user1 = Persona("Leidi", "Santos", "21", "80274029719")
user2 = Persona("Juan", "Sanchez", "23", "12412434243")
user3 = Persona("Daniela", "Zarate", "24", "83719287002")

users = LinkedList()
users.add(user1)
users.add(user2)
users.add(user3)

users.print_list()

print("index 2:", users.index(2))
print("First:", users.first())
print("Last:", users.back())
print("Size:", users.size())





